/*
 * Copyright (C) 2019 Intel Corporation
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

enclave
{
	include "sgx_quote.h"

    trusted
    {
        public sgx_status_t ecall_key_gen_and_seal(
            [out, size=pubkey_size] char *pubkey,
            size_t pubkey_size,
            [out, size=sealedprivkey_size] char *sealedprivkey,
            size_t sealedprivkey_size);

        public sgx_status_t ecall_key_gen_and_seal_all(
            [out, size=sealedpubkey_size] char *sealedpubkey,
            size_t sealedpubkey_size,
            [out, size=sealedprivkey_size] char *sealedprivkey,
            size_t sealedprivkey_size);
				
				// [HELIOS]
        public sgx_status_t ecall_key_gen_and_seal_all_elgamal(
            [out, size=sealed_key_size] char *sealedkey,
            size_t sealed_key_size);

        public sgx_status_t ecall_calc_buffer_sizes(
            [out] size_t* epubkey_size,
            [out] size_t* esealedpubkey_size,
            [out] size_t* esealedprivkey_size,
            [out] size_t* esignature_size,
            [out] size_t* esealed_election_buffer_size,
            [out] size_t* ebulletin_size);
					
        // [HELIOS]
        public sgx_status_t ecall_calc_elgamal_buffer_sizes(
            [out] size_t* e_elgamal_key_buffer_size,
            [out] size_t* e_sealed_elgamal_key_buffer_size);
						
        public sgx_status_t ecall_init(
            [in, size=sealed_key_size] char *sealedkey,
            size_t sealed_key_size,
            [in, size=ballot_buffer_size] char *ballot_buffer,
            size_t ballot_buffer_size,
            [in, size=admin_key_buffer_size] char *admin_key_buffer,
            size_t admin_key_buffer_size,
            [in, size=voter1_key_buffer_size] char *voter1_key_buffer,
            size_t voter1_key_buffer_size,
            [in, size=voter2_key_buffer_size] char *voter2_key_buffer,
            size_t voter2_key_buffer_size,
            [in, size=voter3_key_buffer_size] char *voter3_key_buffer,
            size_t voter3_key_buffer_size,
            [out, size=bulletin_buffer_size] char *bulletin_buffer,
            size_t bulletin_buffer_size,
            [out, size=sealed_election_buffer_size] char *sealed_election_buffer,
            size_t sealed_election_buffer_size);
				
        public sgx_status_t ecall_open(
            [in, size=cmd_size] char *cmd, size_t cmd_size, 
            [in, size=signature_size]char *signature, size_t signature_size,
            [in, size=sealed_election_state_buffer_size]char *sealed_election_state_buffer,
                        size_t sealed_election_state_buffer_size);

						
        public sgx_status_t ecall_cast(
            [in, size=bal_size] char *bal, size_t bal_size, 
            [in, size=signature_size]char *signature, size_t signature_size,
            [in, size=hash_size] char *hash, size_t hash_size, 
            [in, size=sealed_election_state_buffer_size]char *sealed_election_state_buffer, size_t sealed_election_state_buffer_size,
            [out, size=sealed_election_buffer_size]char *sealed_election_buffer, size_t sealed_election_buffer_size,
            [in] char* voterid);
						
        public sgx_status_t ecall_close(
            [out, size=sealed_key_size] char *sealedkey,
            size_t sealed_key_size);
						
        public sgx_status_t ecall_tally(
            [in, size=sealed_election_state_buffer_size]char *sealed_election_state_buffer, size_t sealed_election_state_buffer_size);
						
        public sgx_status_t ecall_unseal_and_sign(
            [in, size=msg_size] uint8_t * msg,
            uint32_t msg_size,
            [in, size=sealed_size]char *sealed,
            size_t sealed_size,
            [out, size=signature_size] char* signature,
            size_t signature_size);
        
        public sgx_status_t ecall_unseal_and_quote(
            [out] sgx_report_t *report,
            [in] sgx_target_info_t *target_info,
            [in, size=sealed_size]char *sealed,
            size_t sealed_size,
            [out, size=public_key_size] char *public_key,
            size_t public_key_size);

		public sgx_status_t ecall_report_gen(
            [out] sgx_report_t *report,
            [in] sgx_target_info_t *target_info,
            sgx_report_data_t report_data);
    };

    untrusted
    {
        void ocall_print_string([in, string] const char *str);
        void ocall_print_int([in, size=1]const int* num);
    };
};
